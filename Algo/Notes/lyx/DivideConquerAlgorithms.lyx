#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{fancyvrb}
\usepackage{color}
\def\PY@reset{\let\PY@it=\relax \let\PY@bf=\relax%
    \let\PY@ul=\relax \let\PY@tc=\relax%
    \let\PY@bc=\relax \let\PY@ff=\relax}
\def\PY@tok#1{\csname PY@tok@#1\endcsname}
\def\PY@toks#1+{\ifx\relax#1\empty\else%
    \PY@tok{#1}\expandafter\PY@toks\fi}
\def\PY@do#1{\PY@bc{\PY@tc{\PY@ul{%
    \PY@it{\PY@bf{\PY@ff{#1}}}}}}}
\def\PY#1#2{\PY@reset\PY@toks#1+\relax+\PY@do{#2}}

\expandafter\def\csname PY@tok@gd\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.63,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@gu\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.50,0.00,0.50}{##1}}}
\expandafter\def\csname PY@tok@gt\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.25,0.82}{##1}}}
\expandafter\def\csname PY@tok@gs\endcsname{\let\PY@bf=\textbf}
\expandafter\def\csname PY@tok@gr\endcsname{\def\PY@tc##1{\textcolor[rgb]{1.00,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@cm\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.50,0.50,0.50}{##1}}}
\expandafter\def\csname PY@tok@vg\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.82,0.44,0.00}{##1}}}
\expandafter\def\csname PY@tok@m\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.38,0.00,0.88}{##1}}}
\expandafter\def\csname PY@tok@mh\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.31,0.50}{##1}}}
\expandafter\def\csname PY@tok@cs\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.80,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@ge\endcsname{\let\PY@it=\textit}
\expandafter\def\csname PY@tok@vc\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.19,0.38,0.56}{##1}}}
\expandafter\def\csname PY@tok@il\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.82}{##1}}}
\expandafter\def\csname PY@tok@go\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.50,0.50,0.50}{##1}}}
\expandafter\def\csname PY@tok@cp\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.31,0.44,0.56}{##1}}}
\expandafter\def\csname PY@tok@gi\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.63,0.00}{##1}}}
\expandafter\def\csname PY@tok@gh\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.50}{##1}}}
\expandafter\def\csname PY@tok@ni\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.50,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@nl\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.56,0.44,0.00}{##1}}}
\expandafter\def\csname PY@tok@nn\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.05,0.52,0.71}{##1}}}
\expandafter\def\csname PY@tok@no\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.19,0.38}{##1}}}
\expandafter\def\csname PY@tok@na\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.75}{##1}}}
\expandafter\def\csname PY@tok@nb\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.44,0.13}{##1}}}
\expandafter\def\csname PY@tok@nc\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.69,0.00,0.38}{##1}}}
\expandafter\def\csname PY@tok@nd\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.31,0.31,0.31}{##1}}}
\expandafter\def\csname PY@tok@ne\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.94,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@nf\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.38,0.69}{##1}}}
\expandafter\def\csname PY@tok@si\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{0.88,0.88,0.88}{\strut ##1}}}
\expandafter\def\csname PY@tok@s2\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@vi\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.19,0.19,0.69}{##1}}}
\expandafter\def\csname PY@tok@nt\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.44,0.00}{##1}}}
\expandafter\def\csname PY@tok@nv\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.56,0.38,0.19}{##1}}}
\expandafter\def\csname PY@tok@s1\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@gp\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.78,0.36,0.04}{##1}}}
\expandafter\def\csname PY@tok@sh\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@ow\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.00}{##1}}}
\expandafter\def\csname PY@tok@sx\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.82,0.13,0.00}{##1}}\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@bp\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.44,0.13}{##1}}}
\expandafter\def\csname PY@tok@c1\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.50,0.50,0.50}{##1}}}
\expandafter\def\csname PY@tok@kc\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.50,0.00}{##1}}}
\expandafter\def\csname PY@tok@c\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.50,0.50,0.50}{##1}}}
\expandafter\def\csname PY@tok@mf\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.38,0.00,0.88}{##1}}}
\expandafter\def\csname PY@tok@err\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.94,0.00,0.00}{##1}}\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{0.94,0.63,0.63}{\strut ##1}}}
\expandafter\def\csname PY@tok@kd\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.50,0.00}{##1}}}
\expandafter\def\csname PY@tok@ss\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.63,0.38,0.00}{##1}}}
\expandafter\def\csname PY@tok@sr\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.00}{##1}}\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,1.00}{\strut ##1}}}
\expandafter\def\csname PY@tok@mo\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.25,0.00,0.88}{##1}}}
\expandafter\def\csname PY@tok@mi\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.00,0.82}{##1}}}
\expandafter\def\csname PY@tok@kn\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.50,0.00}{##1}}}
\expandafter\def\csname PY@tok@o\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.19,0.19,0.19}{##1}}}
\expandafter\def\csname PY@tok@kr\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.50,0.00}{##1}}}
\expandafter\def\csname PY@tok@s\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@kp\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.19,0.50}{##1}}}
\expandafter\def\csname PY@tok@w\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.73,0.73,0.73}{##1}}}
\expandafter\def\csname PY@tok@kt\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.19,0.19,0.56}{##1}}}
\expandafter\def\csname PY@tok@sc\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.00,0.25,0.82}{##1}}}
\expandafter\def\csname PY@tok@sb\endcsname{\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@k\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.00,0.50,0.00}{##1}}}
\expandafter\def\csname PY@tok@se\endcsname{\let\PY@bf=\textbf\def\PY@tc##1{\textcolor[rgb]{0.38,0.38,0.38}{##1}}\def\PY@bc##1{\setlength{\fboxsep}{0pt}\colorbox[rgb]{1.00,0.94,0.94}{\strut ##1}}}
\expandafter\def\csname PY@tok@sd\endcsname{\def\PY@tc##1{\textcolor[rgb]{0.82,0.25,0.13}{##1}}}

\def\PYZbs{\char`\\}
\def\PYZus{\char`\_}
\def\PYZob{\char`\{}
\def\PYZcb{\char`\}}
\def\PYZca{\char`\^}
\def\PYZam{\char`\&}
\def\PYZlt{\char`\<}
\def\PYZgt{\char`\>}
\def\PYZsh{\char`\#}
\def\PYZpc{\char`\%}
\def\PYZdl{\char`\$}
\def\PYZti{\char`\~}
% for compatibility with earlier versions
\def\PYZat{@}
\def\PYZlb{[}
\def\PYZrb{]}
\@addtoreset{section}{part}
\usepackage{tikz}
\usepackage{cancel}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Divide & Conquer Algorithms
\end_layout

\begin_layout Subsection
\begin_inset Formula $O(n\log n)$
\end_inset

 Algorithm for Counting Inversions I
\end_layout

\begin_layout Subsubsection
Divide and Conquer Paradigm
\end_layout

\begin_layout Itemize
Divide into smaller subproblems
\end_layout

\begin_layout Itemize
Conquer via recursive calls
\end_layout

\begin_layout Itemize
Combine solutions of subproblems into one for the original problem
\end_layout

\begin_layout Standard

\series bold
The Problem
\end_layout

\begin_layout Standard

\series bold
Input
\series default
: Array, 
\begin_inset Formula $A$
\end_inset

, containing the numbers 1, 2, 3, ..., in the some order
\end_layout

\begin_layout Standard

\series bold
Output
\series default
: number of 
\bar under
inversions
\bar default
 = number of pairs 
\begin_inset Formula $(i,\, j)$
\end_inset

 of array indices with 
\begin_inset Formula $i<j$
\end_inset

 and 
\begin_inset Formula $A[i]>A[j]$
\end_inset

.
\end_layout

\begin_layout Standard
If the array is not sorted, the number of inversions will be non-zero.
\end_layout

\begin_layout Standard
Example [4:00]: (1, 3, 5, 2, 4, 6)
\end_layout

\begin_layout Standard
Invversions: (3, 2), (5, 2), (5, 4)
\end_layout

\begin_layout Standard
Pictorially, the number of line crossings corresponds to inversions.
\end_layout

\begin_layout Standard

\series bold
Motivation
\series default
: Numerical similarity measure between two ranked lists.
\end_layout

\begin_layout Standard
Used in 
\bar under
collaborative filtering
\bar default
.
\end_layout

\begin_layout Standard
In general, the maximum number of inversions in an array is 
\begin_inset Formula ${n \choose 2}=\frac{n(n-1)}{2}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
High-level Approach
\end_layout

\begin_layout Standard

\series bold
Brute-force
\series default
: Setup a double for loop for i and j and check whether each pair is inverted,
 if so, add to count.
 This run in 
\begin_inset Formula $O(n^{2})$
\end_inset

 time
\end_layout

\begin_layout Standard

\series bold
Divide and Conquer
\series default
: Classify inversions 
\begin_inset Formula $(i,\, j)$
\end_inset

 with 
\begin_inset Formula $[i<j]$
\end_inset

 of an array in one of three types:
\end_layout

\begin_layout Itemize

\series bold
left
\series default
: if 
\begin_inset Formula $i,\, j\le\frac{n}{2}$
\end_inset


\end_layout

\begin_layout Itemize

\series bold
right
\series default
: if 
\begin_inset Formula $i,\, j>\frac{n}{2}$
\end_inset


\end_layout

\begin_layout Itemize

\series bold
split
\series default
: if 
\begin_inset Formula $i\le\frac{n}{2}<j$
\end_inset


\end_layout

\begin_layout Standard
The first two can be computed recursively, split needs separate subroutine.
\end_layout

\begin_layout Standard

\series bold
Hign-Level Algorithm
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Count(array A, length n)
\end_layout

\begin_layout Plain Layout

	if n = 1 return 0
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		x = Count(1st half of A, n/2)
\end_layout

\begin_layout Plain Layout

		y = Count(2nd half of A, n/2)
\end_layout

\begin_layout Plain Layout

		z = CountSplitInv(A, n)
\end_layout

\begin_layout Plain Layout

	return x+y+z
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\bar under
Goal
\bar default
: implement CountSplitInv in linear 
\begin_inset Formula $O(n)$
\end_inset

 time => then Count will run in 
\begin_inset Formula $O(n\log n)$
\end_inset

 time.
\end_layout

\begin_layout Subsection
\begin_inset Formula $O(n\log n)$
\end_inset

 Algorithm for Counting Inversions II
\end_layout

\begin_layout Subsubsection
Piggybacking on Merge Sort
\end_layout

\begin_layout Standard

\series bold
Key Idea #2
\series default
: have recursive calls both count inversions and sort.
\end_layout

\begin_layout Standard

\series bold
Motivation:
\series default
 Merge subroutine naturally uncovers split inversions.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sort_and_Count(array A, length n)
\end_layout

\begin_layout Plain Layout

	if n = 1 return 0
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		(B, x) = Sort_and_Count(1st half of A, n/2)
\end_layout

\begin_layout Plain Layout

		(C, y) = Sort_and_Count(2nd half of A, n/2)
\end_layout

\begin_layout Plain Layout

		(D, z) = Merge_and_CountSplitInv(A, n)
\end_layout

\begin_layout Plain Layout

	return x+y+z
\end_layout

\end_inset


\end_layout

\begin_layout Standard
output sorted A, B, C.
\end_layout

\begin_layout Standard
Merging uncovers number of inversions.
\end_layout

\begin_layout Standard
Pseudocode for Merge
\end_layout

\begin_layout Standard
D = ouput [length=n]
\end_layout

\begin_layout Standard
B = 
\begin_inset Formula $1^{st}$
\end_inset

 sorted array [n/2]
\end_layout

\begin_layout Standard
C = 
\begin_inset Formula $2^{nd}$
\end_inset

 sorted array [n/2]
\end_layout

\begin_layout Standard
i = 1
\end_layout

\begin_layout Standard
j = 1
\end_layout

\begin_layout Standard
Take B, C, traverse D using the k index, maintain pointers i, j to B and
 C respectively
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

for k = 1 to n
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if A(i) < B(j)
\end_layout

\begin_layout Plain Layout

		C(k) = A(i)
\end_layout

\begin_layout Plain Layout

		i++
\end_layout

\begin_layout Plain Layout

	else [B(j)<A(i)]
\end_layout

\begin_layout Plain Layout

		C(k)=B(j)
\end_layout

\begin_layout Plain Layout

		j++
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

(ignores end cases)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose the input array A has no split inversions.
 What is the relationship between the sorted subarrays B and C?
\end_layout

\begin_layout Standard
All elements of B are less than all elements of C.
\end_layout

\begin_layout Standard
On an array with this property, MergeSort will copy everything from B to
 D before C even gets touched.
 So copying elements from array C has something to do with split inversions.
\end_layout

\begin_layout Standard
Ex.: [7:50]
\end_layout

\begin_layout Standard

\bar under
General Claim
\bar default
: The split inversions involving an element, y, of the 2nd array C are percisely
 the numbers left in the 1st array B when y is copied to the output D.
\end_layout

\begin_layout Standard

\bar under
Proof
\bar default
: let x be an element of the 1st array B
\end_layout

\begin_layout Itemize
if x copied to output D before y, then 
\begin_inset Formula $x<y\Rightarrow$
\end_inset

no inversion involving x&y
\end_layout

\begin_layout Itemize
if y copied to output D before x, then 
\begin_inset Formula $y<x\Rightarrow$
\end_inset

x&y are a split inversion
\end_layout

\begin_layout Subsubsection
Merge_and_CountSplitInv
\end_layout

\begin_layout Standard
While merging the two sorted subarrays, keep running total of numbers of
 split inversions.
\end_layout

\begin_layout Standard
When element of 2nd array C gets copied to output D, increment total by
 number of elements remaining in 1st array.
\end_layout

\begin_layout Subsubsection
Run time of subroutine
\end_layout

\begin_layout Standard
Linear time in merging, constant for count, sloppy:
\begin_inset Formula 
\[
O(n)+O(n)=O(n)
\]

\end_inset


\end_layout

\begin_layout Subsection
Strassen's Subcubic Matrix Multiplication Algorithm
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
X\times Y=Z
\]

\end_inset


\begin_inset Formula $n\times n$
\end_inset

 matrices, where 
\begin_inset Formula 
\[
Z_{ij}\text{{i^{th}\,\ row\,\ of\,\ Y}}\times\text{{i^{th}\,\ column\,\ of\,\ Y}}=\sum_{k=1}^{n}X_{ik}\times Y_{kj}
\]

\end_inset


\end_layout

\begin_layout Standard
Note: input size = 
\begin_inset Formula $O(n^{n})$
\end_inset


\end_layout

\begin_layout Standard
Ex.: 
\begin_inset Formula $(n=2)$
\end_inset


\begin_inset Formula 
\[
\left[\begin{array}{cc}
a & b\\
c & d
\end{array}\right]\left[\begin{array}{cc}
e & f\\
g & h
\end{array}\right]=\left[\begin{array}{cc}
ae+bg & af+bh\\
ce+dg & cf+dh
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
Running time from definition: 
\begin_inset Formula $O(n^{3})$
\end_inset

 relative to matrix dimension, 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Applying Divide and Conquer
\end_layout

\begin_layout Standard

\bar under
Idea
\bar default
:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
X=\left[\begin{array}{cc}
A & B\\
C & D
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Y=\left[\begin{array}{cc}
E & F\\
G & H
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
where A through H are all 
\begin_inset Formula $\frac{n}{2}\times\frac{n}{2}$
\end_inset

 matrices.
\end_layout

\begin_layout Standard
then:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
X\times Y=\left[\begin{array}{cc}
AE+BG & AF+BH\\
CE+DG & CF+DH
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Recursive Algorithm #1
\end_layout

\begin_layout Standard

\bar under
Step 1
\bar default
: recursively compute the 8 necessary products
\end_layout

\begin_layout Standard

\bar under
Step 2
\bar default
: do the necessary additions, 
\begin_inset Formula $O(n^{2})$
\end_inset

 time
\end_layout

\begin_layout Standard

\bar under
Fact
\bar default
: running time is 
\begin_inset Formula $O(n^{3})$
\end_inset

 [fallows from master method]
\end_layout

\begin_layout Subsubsection
Strassen's Algorithm (1969)
\end_layout

\begin_layout Standard

\bar under
Step 1
\bar default
: recursively compute only 7 (cleverly chosen) products
\end_layout

\begin_layout Standard

\bar under
Step 2
\bar default
: do the necessary (clever) additions + substractions (still 
\begin_inset Formula $O(n^{2})$
\end_inset

 time)
\end_layout

\begin_layout Standard

\bar under
Fact
\bar default
: better than cubic time! [see Master Method lecture for running time]
\end_layout

\begin_layout Subsubsection
The Details:
\end_layout

\begin_layout Standard

\bar under
The Seven Products
\bar default
:
\begin_inset Formula 
\[
P_{1}=A(F-H)
\]

\end_inset


\begin_inset Formula 
\[
P_{2}=(A+B)H
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P_{3}=(C+D)E
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P_{4}=D(G-E)
\]

\end_inset


\begin_inset Formula 
\[
P_{5}=(A+D)(E+H)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P_{6}=(B-D)(G+H)
\]

\end_inset


\begin_inset Formula 
\[
P_{7}=(A-C)(E+F)
\]

\end_inset


\end_layout

\begin_layout Standard

\bar under
Claim
\bar default
: 
\begin_inset Formula 
\begin{eqnarray*}
X\times Y & = & \left[\begin{array}{cc}
AE+BG & AF+BH\\
CE+DG & CF+DH
\end{array}\right]\\
 & = & \left[\begin{array}{cc}
P_{5}+P_{4}-P_{2}+P_{6} & P_{1}+P_{2}\\
P_{3}+P_{4} & P_{1}+P_{5}-P_{3}-P_{7}
\end{array}\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Proof of one term:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
P_{5}+P_{4}-P_{2}+P_{6} & =\\
AE+\cancel{AH}+\cancel{DE}+\cancel{DH}+\cancel{DG}-\cancel{DE} & -\\
\cancel{AH}-\cancel{BH}+BG+\cancel{BH}-\cancel{DG}-\cancel{DH} & = & AE+BG
\end{eqnarray*}

\end_inset


\end_layout

\end_body
\end_document
